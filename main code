#include <LiquidCrystal.h>
unsigned long signal_len,t1,t2;   //time for which button is pressed
int inputPin = 2;                 //input pin for push button
int ledPin = 4;                   //output pin for LED
String code = "";                 
int cursorCol = 0;                //cursor for lcd columns
int cursorRow = 0;                //cursor for lcd rows
LiquidCrystal lcd(7, 8, 9, 10, 11, 12); 

void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);                // set # of LCD's columns & rows
  pinMode(inputPin, INPUT_PULLUP); //internal pullup resistor is used to simplify the circuit
  pinMode(ledPin,OUTPUT);
}

void loop()
{
  lcd.setCursor(cursorCol, cursorRow);        //set cursor to column 0 line 1
  //lcd.print(millis() / 1000);               //print # of sec since rest
NextDotDash:
  while (digitalRead(inputPin) == HIGH) {}
  t1 = millis();                            //time at button press
  digitalWrite(ledPin, HIGH);               //LED on while button pressed
  while (digitalRead(inputPin) == LOW) {}
  t2 = millis();                            //time at button release
  digitalWrite(ledPin, LOW);                //LED off on button release
  signal_len = t2 - t1;                     //time for which button is pressed
  if (signal_len > 50)                      //to account for switch debouncing
  {
    code += readio();                       //function to read dot or dash
  }
  
  while ((millis() - t2) < 500)           //if time between button press greater than 0.5sec, skip loop and go to next alphabet
  {     
    if (digitalRead(inputPin) == LOW)
    {
      goto NextDotDash;
    }
  }
  convertor();                          //function to decipher code into alphabet
}

char readio()
{
  if (signal_len < 600 && signal_len > 50)
  {
    return '.';                        //if button press less than 0.6sec, it is a dot
  }
  else if (signal_len > 600)
  {
    return '-';                        //if button press more than 0.6sec, it is a dash
  }
}

void convertor()
{
  static String letters[] = {"-----", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", //numbers
                            "---...", "-.-.-.", "--..--", "-...-", "..--..", "-.----", "---..-",   //symbols
                            ".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", //alphabet
                             ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", "E"
                            };
  int i = 0;
  if (cursorCol == 16 && cursorRow == 0)    //go to next row
    {
      cursorRow = 1;
      cursorCol = 0;
    }
  else if (cursorCol == 16)                 //clear when full
    {
      lcd.clear();
      cursorRow = 0;
      cursorCol = 0;
    }
  if (code == ".-.-.-")
  {
    lcd.print(".");        //for break
    cursorCol++;           //increment cursor for next val
  }
  else
  {
    while (letters[i] != "E")  //loop for comparing input code with letters array
    {
      if (letters[i] == code)
      {
        lcd.print(char('0' + i));
        cursorCol++;
        break;
      }
      i++;
    }
    if (letters[i] == "E")
    {
      lcd.println("<ERROR>");  //if input code doesn't match any letter, error
      cursorCol += 7;
    }
 
  }
  code = "";                            //reset code to blank string
}
